<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[移动端dpr不同时，2x图，3x图的处理方法]]></title>
    <url>%2F2016%2F06%2F16%2F%E7%A7%BB%E5%8A%A8%E7%AB%AFdpr%E4%B8%8D%E5%90%8C%E6%97%B6%EF%BC%8C2x%E5%9B%BE%EF%BC%8C3x%E5%9B%BE%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前面总结了移动端页面怎么利用rem实现不同屏幕的适配，解决了尺寸一样，随页面缩放时发生变形的问题。 但是因为不同手机的屏幕分辨率不同，尤其是受高清屏的影响，有了设备的物理像素和设备的独立像素（css中的px像素）的区别，同样的页面，独立像素是640 1280，但是物理像素是320 640，写页面的时候，就需要按照 比例为2， 即 640 * 1280来准备图片。 dpr(device pixel ratio).设备像素比window.devicePixelRatio = 物理像素 / 独立像素 浏览器默认的视口获取document.documentElement.clientWidth 首先需要对视口做设置，不允许用户随意缩放： &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt; // 让viewport宽度 = 设备的宽度 dpr 不同，造成图片再dpr比较大的情况下，被放大，图片失真，所以需要在切图的时候准备对应的2X图和3x图，普通屏幕下，加载高清图又浪费dpr &lt;= 2时，使用2x图 apr &gt;= 2时，使用3x图 比如ipone6是375的屏，切750的2x图，3x图切1125px尺寸下的图 在项目里面，两种写法都用过，没有区别： 1.在common的mixin公共样式里面，写 // 2x和3x图切换的样式，根据media-query来判断 bg-image($url) background-image: url($url + &quot;@2x.png&quot;) @media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3) background-image: url($url + &quot;@3x.png&quot;) // $url是前缀，用的时候，先@import引入公共样式，然后 img { bg-image(&apos;beijing&apos;) } 2.也是在公共样式mixin里面写，这个时候根元素里面也需要设置了data-dpr img-dpr(){ background-image: url(image.jpg);//默认 [data-dpr=&quot;2&quot;] &amp; { background-image: url(image@2x.jpg);//两倍高清 } [data-dpr=&quot;3&quot;] &amp; { background-image: url(image@3x.jpg);//三倍高清 } } 先引入mixin样式 .content{ img-dpr(); } 雪碧图使用rem造成像素偏差的问题解决办法：1.先放大100倍，提高图片精度，找到图片位置，再缩小100倍 .icon-fix { background: none; position: relative; overflow: hidden; } .icon-fix:after { content: &apos;&apos;; display: block; width: 10000%; height: 10000%; position: absolute; left: 0; top: 0; background-image: url(sprite.png); background-repeat: no-repeat; background-size: 140rem; -webkit-transform-origin: 0 0; -webkit-transform: scale(.01); transform-origin: 0 0; transform: scale(.01); } .icon3:after { background-position: 0 -280rem; }]]></content>
      <categories>
        <category>移动端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[移动端高清、多屏幕适配方案总结-rem]]></title>
    <url>%2F2016%2F06%2F15%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%AB%98%E6%B8%85%E3%80%81%E5%A4%9A%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93-rem%2F</url>
    <content type="text"><![CDATA[这篇文章，算是对学习rem及用在手机端项目里面的一个汇总。 rem是什么？在开发移动端h5页面的时候，一套设计图，需要适配不同尺寸的手机，手机的分辨率也不同。所以不能把单位写死为xxpx。 这里对rem、px、em做一个区分： px是绝对字体大小，但是页面缩放的时候因为字体不变，网页还是那么大，会变形。 em计算方式是乘以当前对象从父级遗传的字体大小，参考对象是一个变化的值 父级： height: 1em; // 16px,如果html的font-size是100% 子元素： font-size: 0.625em // 16 * 0.625 = 10px height: 1em // 实际上是10px rem是rem是基于根节点html的字体大小进行计算，浏览器一般默认字体是16px,1em = 16px;但是是css3的新属性，不支持ie678，兼容性处理，再写px或者100% 1.5rem = 根节点默认字体大小 * 1.5 = 24px; // 转化的时候，可以用 28px = 28/16 = 1.75rem 可以把根节点设置为10px或62.5%（100%是16px），方便以10计算而不是16，为了兼容IE7和ie8,默认字体可以设置为： html { font-size: 62.5%; } 利用rem实现多屏幕适配的思路相同的rem,只需要更改页面根元素html的font-size,把和元素尺寸有关的css，如width,height,line-height,margin,padding等都以rem作为单位,这样页面在不同设备下就能保持一致的网页布局，也解决了1px的问题。 怎么判断屏幕的尺寸（宽度），去动态的调整html的font-size？方法一、css media query@media screen and (max-width: 320px) { html{ font-size: 14px; } } @media screen and (min-width: 321px) and (max-width: 413px) { html{ font-size: 16px; } } @media screen and (min-width: 414px) and (max-width: 639px) { html{ font-size: 17px; } } @media screen and (min-width: 640px) { html{ font-size: 18px; } } 方法二、通过js来判断页面宽度，动态调整html的font-size 方法三、引入淘宝的lib-flexible地址：https://github.com/amfe/lib-flexible使用文档说明：http://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html1.把flexible.js和flexible_css.js引入，放在head标签的utf-8meta标签下面此时不用再写 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;/&gt; 2.此时,F12,会发现ip6下面，html的font-size会自动被设置为font-size: 75px（设计稿的尺寸是750），也会给html元素上增加一个data-dpr属性，js会根据不同的设备添加不同的data-dpr值，比如ip6是2. 3写css样式的时候，其他样式尺寸设置为rem，根据标注稿尺寸 / 标注稿基准字体大小来转换 1）实现定义了一个变量来保存基准字体大小 @font-size-base: 75; 2）某一个元素的尺寸设置方式： .item { width: 350rem/@font-size-base; // 350 / 70 = 5rem height: 80rem/@font-size-base; } 标注稿基准字体大小 = 标注稿宽度 / 10，如标注稿宽为750，标注稿基准字体大小为75；标注稿宽为640，标注稿基准字体大小为64；（所以淘宝这个方案是可以在任意设计稿尺寸下使用的） 4.如果还需要设置某一个元素的字体大小，可以根据html的data-dpr属性来处理，写法如下： [data-dpr=&quot;2&quot;] p { font-size: 16px; } [data-dpr=&quot;3&quot;] p { font-size: 24px; } dpr(device pixel ratio).设备像素比；i5,6 = 2;i6plus=3; 使用rem时候的问题，最多的问题就是 小数像素造成background-image 的问题，经常会因为小数像素导致背景图被裁掉一部分。所以可以的话，尽量使用iconfont,或者尽量给背景图设置一定的空白间隙]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端底部tab或按钮显示问题-css sticky footer]]></title>
    <url>%2F2016%2F03%2F12%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BA%95%E9%83%A8tab%E6%88%96%E6%8C%89%E9%92%AE%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98-css%20sticky%20footer%2F</url>
    <content type="text"><![CDATA[问题： 项目里面需要设置一个弹出框，下面有一个浮层，浮层上面，分别是内容区块和底部关闭按钮，要求关闭按钮总是固定在窗口底部。 但是实际遇到的问题是，页面内容不够长的时候，页脚块固定在视窗底部；页面内容足够长，需要滚动的时候，页脚块随着内容向下推送，而不是固定视窗底部，挡住了页面的文字。 解决方法：设置三个层，一个内容的包裹层，里面再有一个层，是内容；再有一个层是底部层 // wrapper层 &lt;div class=&quot;detail&quot;&gt; // 和关闭按钮并列的层 &lt;div class=&quot;detail-wrapper clearfix&quot;&gt; // 里面的主题内容层 &lt;div class=&quot;detail-main&quot;&gt;&lt;/div&gt; &lt;/div&gt; // 关闭按钮层 &lt;div class=&quot;detail-close&quot;&gt; &lt;i class=&quot;icon-close&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;/div&gt; // 样式 .detail /*设置全屏效果，占满视窗*/ position: fixed z-index: 100 top: 0 left: 0 width: 100% height: 100% overflow: auto background-color: rgba(7, 17, 27, 0.8) // filter: blur(10px) // 内容的wrapper层也宽高也占满100%，占满屏幕 .detail-wrapper min-width: 100% height: 100% .detail-main margin-top: 64px padding-bottom: 64px (这个是关键，设置一个下padding，给底部留出空间) .detail-close // 和wrapper层一个层级，wrapper层占有100%的高度，所以footer层永远在视口之外，需要下面用-margin-top调整至视口之内 position: relative width: 32px height: 32px margin: -64px auto 0 auto // 设置一个-margin,将自己放置在上面预留的-margin处 clear: both font-size: 32px]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端1px的border问题]]></title>
    <url>%2F2015%2F07%2F12%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E7%9A%84border%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近做一个移动端的页面，踩了很多坑，也有很多小细节，终于找个时间总结一下，记录下来。 问题： 页面中很多border-bottom被设置为1px,在桌面端的时候，没有问题，但是到手机端，看起来会是2px,因为手机的有一个设备像素比，是两倍,设置的是1px，在2倍的像素比下，就是2px. 解决方法： 因为像素不可能是0.5px,最小单位是1px，所以考虑用css3的伪类 + transform方法对其做scale缩放 把原来的border去掉，利用：after重新做border,定位于原来的元素。 并且由于不同设备像素比，缩放比例需要不同。 因为在项目里面使用的比较多，为了增强复用性，需要单独创建一个文件，比如：css/mixin.css，使用的时候将这个文件用@import引入进来 css/mixin.css 设置： /*设置一个border-top为1px的伪类*/ .border-1px { position: relative; border: none; } .border-1px:after { display: block; position: absolute; left: 0; bottom: 0; // 因为设置的是border-bottom width: 100%; border-top: 1px solid #ccc; //height: 1px; content: &apos;&apos; } 注意：stylus或less或sass的写法： .border-1px ($color) { // 样式 &amp;:after // 样式 // 把颜色换成$color } /* 如果是需要设置border-top,用before伪类,设置伪类的border-bottom 但是此时的1px还是和原来直接设置border-bottom: 1px 一样的，并没有缩放效果 */ /*根据设备像素比，用media query来判断，做不同缩放，保证缩放完毕的值 * 设备像素比 = 1px*/ // 在设备像素比是1.5和2时候用scale做缩放 @media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5) .border-1px &amp;::after -webkit-transform: scaleY(0.7) transform: scaleY(0.7) @media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2) .border-1px &amp;::after -webkit-transform: scaleY(0.5) transform: scaleY(0.5) 用法： 1.先引入定义的公用样式，用 @import &apos;地址&apos; 2.设置给需要的元素，比如item元素 .item { border-1px(&apos;#ccc&apos;) // 设置1px的border-bottom }]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css布局总结]]></title>
    <url>%2F2015%2F05%2F20%2Fcss%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[一、两列布局写移动端项目的时候，经常遇到左边或右边是图片，需要固定宽度，中间自适应，是图片的内容介绍，需要垂直居中，且和两边高度对齐，这个时候用flex布局比较好，总结了两种比较常用的方法： 第一种：flex左边宽度固定，右边自适应/*父元素*/ .father { display: flex; } /*左边子元素*/ .left { flex: 0 0 30px; width: 30px; } .right { flex: 1; } 第二种：positon定位和padding-left用100%宽的一个div用paading-left把左边图片的位置留出来，图片绝对定位到padding-left区域 例如一个列表项，每一个item下面左边是图片，右边是说明 二、三列布局左侧和右侧固定，中间自适应 1.设置第一个DIV左浮动，第二个DIV右浮动，第三个DIV设置左右MARGIN为两个DIV的固定宽度 #box1 { float: left; width: 300px; background-color: #0099cc; } #box2 { float: right; width: 300px; background-color: #cc6600; } #box3 { height: 500px; background-color: #c30230; margin-left: 300px; margin-right: 300px; } &lt;div id=&quot;box1&quot;&gt;这是div1&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;这是div2&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;这是div3&lt;/div&gt; 2.父元素宽度100%，相对定位，左右子元素绝对定位，中间子元素设置margin-left和margin-right #wrapper { position: relative; width: 100%; } #box1 { position: absolute; top: 0; left: 0; width: 300px; height: 300px; background-color: #0099cc; } #box2 { height: 400px; margin-left: 300px; margin-right: 300px; background-color: #cc6600; } #box3 { position: absolute; top: 0; right: 0; width: 300px; height: 300px; background-color: #c30230; } 三、多列布局要横向排列的子元素设置float:left或者是display:inline-block,并且设置父元素的font-size为0 经典圣杯布局和淘宝双飞翼布局实现的都是三栏布局，两边的盒子宽度固定，中间盒子自适应，也就是我们常说的固比固布局页面的宽度的变化，三栏布局是中间盒子优先渲染，两边的盒子框子固定不变 圣杯布局&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;middle&quot;&gt;&lt;h4&gt;中间弹性区&lt;/h4&gt;&lt;/div&gt; &lt;div class=&quot;left&quot;&gt;&lt;h4&gt;左边栏&lt;/h4&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;h4&gt;右边栏&lt;/h4&gt;&lt;/div&gt; &lt;/div&gt; /*middle放在第一个，先渲染，宽度100%*/ .container{ padding: 0 200px; 左右盒子的宽度 height:200px; overflow:hidden; } .middle{ width: 100%; height: 200px; float:left; } .left{ position: relative; left: -200px width: 200px; height: 200px; float:left; margin-left: -100%; // 设置左边盒子负边距为中间盒子的宽度，即100%，可以在中间盒子的左边 } .right{ position: relative; //重点 right: -210px // 重点 width: 200px; height: 200px; float:left; margin-left: -200px; // 关键，这样才能在最右边 } 淘宝的双飞翼布局 淘宝的双飞翼布局是在middle的div里又插入一个div，通过调整内部div的margin值，实现中间栏自适应，内容写到内部div中。 &lt;div id=&quot;middle&quot;&gt; &lt;div id=&quot;inside&quot;&gt;middle&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;left&quot;&gt;left&lt;/div&gt; &lt;div id=&quot;right&quot;&gt;right&lt;/div&gt; #middle{ float:left; width:100%;/*左栏上去到第一行*/ height:100px; } #left { float:left; width:180px; height:100px; margin-left:-100%; // 本来在第二行，此时上去到第一行 } #right{ float:left; width:200px; height:100px; margin-left:-200px; // 本来在第二行，此时到第一行 } /*给内部div添加margin，把内容放到中间栏，其实整个背景还是100%*/ #inside{ margin:0 200px 0 180px; height:100px; }]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css实现垂直居中的方法]]></title>
    <url>%2F2015%2F05%2F12%2Fcss%E4%B8%8D%E5%AE%9A%E5%AE%BD%E9%AB%98%E7%9A%84%E5%AD%90%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[不定宽高的子元素垂直水平居中的方法项目里面写静态页面的时候，多次自适应宽高的子元素需要设置垂直水平居中的方法，总结了一下，主要是利用css3的translate和flex两种方法 示例： &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;con&quot;&gt;&lt;/div&gt; /div&gt; 第一种：css3的translate方法// 父元素 .box { position: relative; width: 500px; height: 300px; background-color: red; } // 子元素 .con { position: absolute; width: 20%; height: 50%; /*不定宽高*/ left: 50%; /*先移动父元素的50%*/ top: 50%; transform: translate(-50%, -50%); /*移动自身的50%*/ background-color: #000; } 第二种：flex方法.box { display: flex; justify-content: center; /*块居中对齐*/ align-items: center; /*块垂直居中*/ width: 300px; height: 300px; background-color: red; } .con { width: 30%; height: 40%; background-color: #000; }]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Hexo和Github搭建的博客]]></title>
    <url>%2F2015%2F04%2F01%2Fartical%2F</url>
    <content type="text"><![CDATA[博客迁移原因之前一直在印象笔记上做记录，单机版的，时间长了占用大量的本地内存。markdown写起来还是比较少的，偶然看到一个用hexo搭建的博客，简洁明了，花了几个小时的功夫，终于把这个博客搭建起来了，虽然功能还不完善，但是看起来还是很舒服的，后面有时间了再慢慢完善。这几天先把部分笔记迁移过来，权当再复习一遍知识。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>